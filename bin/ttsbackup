#!/usr/bin/env node

var program = require('commander');
var download = require('./../lib/commands/download');
var rewriter = require('./../lib/commands/rewrite');
var mod_lister = require('./../lib/commands/mod_lister');
var mod_installer = require('./../lib/commands/mod_installer');
var interactive_backup = require('./../lib/commands/interactive_backup');
var recoverer = require('./../lib/commands/recoverer');
var mod_validator = require('./../lib/commands/mod_validator');
var WorkshopHelper = require('./../lib/util/workshop_helper');
var _ = require('lodash');

program.version('0.0.0');

program
    .command('backup')
    .description('interactively pick mods to backup to a particular location, create a mod file for tabletop simulator, and add to your installed mods. If you\'re unsure, this is the option you\'re looking for.')
    .option('-a, --all', 'Show all games, including previously backed up games')
    .action(interactive_backup.run);

program
    .command('recover')
    .description('take a mod file that no long loads and point it to your own files')
    .action(recoverer.run);

program.command('download <path>')
    .description('download all images, models, and the mod file needed to load in tts')
    .option('-c, --clean', 'removes all downloaded game files from archive/Game/Images, Models, and Workshop before starting the archive process')
    .option('-o, --outputDir <outputDir>', 'path to save downloaded files')
    .action(_.curryRight(download.download, 3)(function () {
        console.log("Download complete!");
    }));

program.command('rewrite <path>')
    .description('rewrite mod file at path with a given base url')
    .option('-r, --rewriteBaseUrl <rewriteBaseUrl>', 'The base url to rewrite across the mod file, e.g. https://dl.dropboxusercontent.com/u/12345/games')
    .action(rewriter.rewrite);

program.command('list')
    .description('list installed mods')
    .option('-w, --workshopFileInfosPath <workshopFileInfosPath>', "The WorkshopFileInfos.json path. This defaults to " + WorkshopHelper.defaultWorkshopInfosPath())
    .action(mod_lister.list);

program.command('install <path>')
    .option('-w, --workshopFileInfosPath <workshopFileInfosPath>', "The WorkshopFileInfos.json path. This defaults to " + WorkshopHelper.defaultWorkshopInfosPath())
    .description('install mod file at given path into your steam workshop')
    .action(_.curryRight(mod_installer.install)(_.identity));

program.command('validate <path>')
    .description('validate that all urls in a mod file work')
    .action(_.curryRight(mod_validator.validate)(_.identity));

program.parse(process.argv);

if (process.argv.length <= 2) {
    interactive_backup.run();
}
